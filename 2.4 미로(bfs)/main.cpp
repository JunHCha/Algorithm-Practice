/*
https://www.acmicpc.net/problem/2178
N×M크기의 배열로 표현되는 미로가 있다.

1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <queue>
#define MAX_SIZE 100

using namespace std;

int n, m, map[MAX_SIZE][MAX_SIZE], visited[MAX_SIZE][MAX_SIZE], d;
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, 1, 0, -1 };
struct VERTEX {
	int x, y;
};

bool safe(int x, int y) {
	return (0 <= x && x < n) && (0 <= y && y < m);
}

void input() {
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++)	{
		for (int j = 0; j < m; j++) {
			scanf("%1d", &map[i][j]);
		}
	}
	
}



void bfs(int x, int y) {
	queue<VERTEX> q;
	q.push(VERTEX{ x, y });
	visited[x][y] = 1;
	while (!q.empty()) {
		VERTEX temp = q.front();
		q.pop();
		for (int i = 0; i < 4; i++)	{
			int x = temp.x + dx[i]; int y = temp.y + dy[i];
			if (map[x][y] == 1 && visited[x][y] == 0 && safe(x, y)) {
				visited[x][y] = visited[temp.x][temp.y] + 1;
				q.push(VERTEX{ x,y });
			}
		}
	}
}

int solve() {
	bfs(0, 0);
	return visited[n - 1][m - 1];
}

int main() {
	input();
	printf("%d\n", solve());

	system("pause");
	return 0;
}

